# interpreter for shell commands (needs to be POSIX compatible)
set shell sh
# set shell zsh
# set shell fish
# set color256 true
set preview true
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'

set icons
set ignorecase true

# set drawbox true
# set hidden true

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

cmd aj %lf -remote "send $id cd '$(autojump $1)'"
map J push :aj<space>

map f $lf -remote "send $id select '$(fzf)'"

# file opener actions dedicated keys{{{
# map o &mimeopen $f
# map O $mimeopen --ask $f
map o open $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    # Detect OS
    case "$(uname -s)" in
        Linux*) 
            MIME_CMD="file --mime-type -b"
            IMAGE_VIEWER="nsxiv -aio"
            PDF_VIEWER="zathura"
            OFFICE_APP="localc"
            AUDIO_PLAYER="mpv --audio-display=no"
            VIDEO_PLAYER="setsid -f mpv -quiet"
            IMAGE_EDITOR="gimp"
            SVG_VIEWER="display"
            OPENER_CMD="setsid -f"
            ABS_PATH="xdg-open"
            ;;
        Darwin*)
            MIME_CMD="file -bI | awk '{print \$1}'"
            IMAGE_VIEWER="open"
            PDF_VIEWER="open"
            OFFICE_APP="open"
            AUDIO_PLAYER="afplay"
            VIDEO_PLAYER="open"
            IMAGE_EDITOR="open -a GIMP"
            SVG_VIEWER="open"
            OPENER_CMD=""
            ABS_PATH="echo"
            ;;
        *) ;;
    esac

    # Get absolute path
    f_path=$($ABS_PATH "$f")

    # Get MIME type
    mime_type=$(eval "$MIME_CMD \"$f_path\"")

    case "$mime_type" in
        application/octet-stream) gf show "$f" ;;
        application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) $OFFICE_APP "$fx" ;;
        image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) $OPENER_CMD $PDF_VIEWER "$fx" >/dev/null 2>&1 ;;
        text/*|application/json|inode/x-empty|application/x-subrip) $EDITOR "$fx" ;;
        image/x-xcf) $OPENER_CMD $IMAGE_EDITOR "$f" >/dev/null 2>&1 ;;
        image/svg+xml) $SVG_VIEWER "$f" ;;
        image/*)
            if [ "$(uname -s)" = "Linux" ]; then
                rotdir "$f" | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|avif\|tif\|ico\)\(_large\)*$" |
                    $OPENER_CMD $IMAGE_VIEWER 2>/dev/null | while read -r file; do
                        [ -z "$file" ] && continue
                        lf -remote "send select \"$file\""
                        lf -remote "send toggle"
                    done &
            else
                open "$f"
            fi
            ;;
        audio/*) $AUDIO_PLAYER "$f" ;;
        video/*) $OPENER_CMD $VIDEO_PLAYER "$f" >/dev/null 2>&1 ;;
        application/epub*) $OPENER_CMD $PDF_VIEWER "$fx" >/dev/null 2>&1 ;;
        application/pgp-encrypted) $EDITOR "$fx" ;;
        *) for f in $fx; do $OPENER_CMD ${OPENER:-$IMAGE_VIEWER} "$f" >/dev/null 2>&1; done ;;
    esac
}}


# }}}

# delete {{{
cmd delete %set -f; rm -rf $fx
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

# use '<delete>' key for either 'trash' or 'delete' command
map <delete> delete
map <bs2> trash
map D delete
map t trash
map dd trash
# }}}

# zip/unzip functions{{{
cmd unarchive ${{
  case "$f" in
	  *.gz) gzip -d "$f" ;;
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *.xz) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"
# }}}

# Mappings {{{
map C clear
map U unselect
map ee $$EDITOR "$f"
map br $vimv $fx
# }}}

# archive mappings {{{
map az zip
map at tar
map ag targz
map ab targz
map au unarchive
# }}}

# vim:foldmethod=marker:foldlevel=0
